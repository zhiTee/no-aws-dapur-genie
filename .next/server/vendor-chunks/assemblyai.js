"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/assemblyai";
exports.ids = ["vendor-chunks/assemblyai"];
exports.modules = {

/***/ "(rsc)/./node_modules/assemblyai/dist/node.mjs":
/*!***********************************************!*\
  !*** ./node_modules/assemblyai/dist/node.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AssemblyAI: () => (/* binding */ AssemblyAI),\n/* harmony export */   FileService: () => (/* binding */ FileService),\n/* harmony export */   LemurService: () => (/* binding */ LemurService),\n/* harmony export */   RealtimeService: () => (/* binding */ RealtimeService),\n/* harmony export */   RealtimeServiceFactory: () => (/* binding */ RealtimeServiceFactory),\n/* harmony export */   RealtimeTranscriber: () => (/* binding */ RealtimeTranscriber),\n/* harmony export */   RealtimeTranscriberFactory: () => (/* binding */ RealtimeTranscriberFactory),\n/* harmony export */   StreamingTranscriber: () => (/* binding */ StreamingTranscriber),\n/* harmony export */   TranscriptService: () => (/* binding */ TranscriptService)\n/* harmony export */ });\n/* harmony import */ var stream_web__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! stream/web */ \"stream/web\");\n/* harmony import */ var ws__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ws */ \"(rsc)/./node_modules/ws/wrapper.mjs\");\n/* harmony import */ var fs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! fs */ \"fs\");\n/* harmony import */ var stream__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! stream */ \"stream\");\n\n\n\n\n\nconst DEFAULT_FETCH_INIT = {\n    cache: \"no-store\",\n};\n\nconst buildUserAgent = (userAgent) => defaultUserAgentString +\n    (userAgent === false\n        ? \"\"\n        : \" AssemblyAI/1.0 (\" +\n            Object.entries({ ...defaultUserAgent, ...userAgent })\n                .map(([key, item]) => item ? `${key}=${item.name}/${item.version}` : \"\")\n                .join(\" \") +\n            \")\");\nlet defaultUserAgentString = \"\";\nif (typeof navigator !== \"undefined\" && navigator.userAgent) {\n    defaultUserAgentString += navigator.userAgent;\n}\nconst defaultUserAgent = {\n    sdk: { name: \"JavaScript\", version: \"4.16.1\" },\n};\nif (typeof process !== \"undefined\") {\n    if (process.versions.node && defaultUserAgentString.indexOf(\"Node\") === -1) {\n        defaultUserAgent.runtime_env = {\n            name: \"Node\",\n            version: process.versions.node,\n        };\n    }\n    if (process.versions.bun && defaultUserAgentString.indexOf(\"Bun\") === -1) {\n        defaultUserAgent.runtime_env = {\n            name: \"Bun\",\n            version: process.versions.bun,\n        };\n    }\n}\nif (typeof Deno !== \"undefined\") {\n    if (process.versions.bun && defaultUserAgentString.indexOf(\"Deno\") === -1) {\n        defaultUserAgent.runtime_env = { name: \"Deno\", version: Deno.version.deno };\n    }\n}\n\n/**\n * Base class for services that communicate with the API.\n */\nclass BaseService {\n    /**\n     * Create a new service.\n     * @param params - The parameters to use for the service.\n     */\n    constructor(params) {\n        this.params = params;\n        if (params.userAgent === false) {\n            this.userAgent = undefined;\n        }\n        else {\n            this.userAgent = buildUserAgent(params.userAgent || {});\n        }\n    }\n    async fetch(input, init) {\n        init = { ...DEFAULT_FETCH_INIT, ...init };\n        let headers = {\n            Authorization: this.params.apiKey,\n            \"Content-Type\": \"application/json\",\n        };\n        if (DEFAULT_FETCH_INIT?.headers)\n            headers = { ...headers, ...DEFAULT_FETCH_INIT.headers };\n        if (init?.headers)\n            headers = { ...headers, ...init.headers };\n        if (this.userAgent) {\n            headers[\"User-Agent\"] = this.userAgent;\n        }\n        init.headers = headers;\n        if (!input.startsWith(\"http\"))\n            input = this.params.baseUrl + input;\n        const response = await fetch(input, init);\n        if (response.status >= 400) {\n            let json;\n            const text = await response.text();\n            if (text) {\n                try {\n                    json = JSON.parse(text);\n                }\n                catch {\n                    /* empty */\n                }\n                if (json?.error)\n                    throw new Error(json.error);\n                throw new Error(text);\n            }\n            throw new Error(`HTTP Error: ${response.status} ${response.statusText}`);\n        }\n        return response;\n    }\n    async fetchJson(input, init) {\n        const response = await this.fetch(input, init);\n        return response.json();\n    }\n}\n\nclass LemurService extends BaseService {\n    summary(params) {\n        return this.fetchJson(\"/lemur/v3/generate/summary\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n    }\n    questionAnswer(params) {\n        return this.fetchJson(\"/lemur/v3/generate/question-answer\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n    }\n    actionItems(params) {\n        return this.fetchJson(\"/lemur/v3/generate/action-items\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n    }\n    task(params) {\n        return this.fetchJson(\"/lemur/v3/generate/task\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n    }\n    getResponse(id) {\n        return this.fetchJson(`/lemur/v3/${id}`);\n    }\n    /**\n     * Delete the data for a previously submitted LeMUR request.\n     * @param id - ID of the LeMUR request\n     */\n    purgeRequestData(id) {\n        return this.fetchJson(`/lemur/v3/${id}`, {\n            method: \"DELETE\",\n        });\n    }\n}\n\nconst factory = (url, params) => new ws__WEBPACK_IMPORTED_MODULE_1__[\"default\"](url, params);\n\nconst RealtimeErrorType = {\n    BadSampleRate: 4000,\n    AuthFailed: 4001,\n    /**\n     * @deprecated Use InsufficientFunds or FreeTierUser instead\n     */\n    InsufficientFundsOrFreeAccount: 4002,\n    InsufficientFunds: 4002,\n    FreeTierUser: 4003,\n    NonexistentSessionId: 4004,\n    SessionExpired: 4008,\n    ClosedSession: 4010,\n    RateLimited: 4029,\n    UniqueSessionViolation: 4030,\n    SessionTimeout: 4031,\n    AudioTooShort: 4032,\n    AudioTooLong: 4033,\n    AudioTooSmallToTranscode: 4034,\n    /**\n     * @deprecated Don't use\n     */\n    BadJson: 4100,\n    BadSchema: 4101,\n    TooManyStreams: 4102,\n    Reconnected: 4103,\n    /**\n     * @deprecated Don't use\n     */\n    ReconnectAttemptsExhausted: 1013,\n    WordBoostParameterParsingFailed: 4104,\n};\nconst RealtimeErrorMessages = {\n    [RealtimeErrorType.BadSampleRate]: \"Sample rate must be a positive integer\",\n    [RealtimeErrorType.AuthFailed]: \"Not Authorized\",\n    [RealtimeErrorType.InsufficientFunds]: \"Insufficient funds\",\n    [RealtimeErrorType.FreeTierUser]: \"This feature is paid-only and requires you to add a credit card. Please visit https://app.assemblyai.com/ to add a credit card to your account.\",\n    [RealtimeErrorType.NonexistentSessionId]: \"Session ID does not exist\",\n    [RealtimeErrorType.SessionExpired]: \"Session has expired\",\n    [RealtimeErrorType.ClosedSession]: \"Session is closed\",\n    [RealtimeErrorType.RateLimited]: \"Rate limited\",\n    [RealtimeErrorType.UniqueSessionViolation]: \"Unique session violation\",\n    [RealtimeErrorType.SessionTimeout]: \"Session Timeout\",\n    [RealtimeErrorType.AudioTooShort]: \"Audio too short\",\n    [RealtimeErrorType.AudioTooLong]: \"Audio too long\",\n    [RealtimeErrorType.AudioTooSmallToTranscode]: \"Audio too small to transcode\",\n    [RealtimeErrorType.BadJson]: \"Bad JSON\",\n    [RealtimeErrorType.BadSchema]: \"Bad schema\",\n    [RealtimeErrorType.TooManyStreams]: \"Too many streams\",\n    [RealtimeErrorType.Reconnected]: \"This session has been reconnected. This WebSocket is no longer valid.\",\n    [RealtimeErrorType.ReconnectAttemptsExhausted]: \"Reconnect attempts exhausted\",\n    [RealtimeErrorType.WordBoostParameterParsingFailed]: \"Could not parse word boost parameter\",\n};\nclass RealtimeError extends Error {\n}\n\nconst StreamingErrorType = {\n    BadSampleRate: 4000,\n    AuthFailed: 4001,\n    InsufficientFunds: 4002,\n    FreeTierUser: 4003,\n    NonexistentSessionId: 4004,\n    SessionExpired: 4008,\n    ClosedSession: 4010,\n    RateLimited: 4029,\n    UniqueSessionViolation: 4030,\n    SessionTimeout: 4031,\n    AudioTooShort: 4032,\n    AudioTooLong: 4033,\n    AudioTooSmallToTranscode: 4034,\n    BadSchema: 4101,\n    TooManyStreams: 4102,\n    Reconnected: 4103,\n};\nconst StreamingErrorMessages = {\n    [StreamingErrorType.BadSampleRate]: \"Sample rate must be a positive integer\",\n    [StreamingErrorType.AuthFailed]: \"Not Authorized\",\n    [StreamingErrorType.InsufficientFunds]: \"Insufficient funds\",\n    [StreamingErrorType.FreeTierUser]: \"This feature is paid-only and requires you to add a credit card. Please visit https://app.assemblyai.com/ to add a credit card to your account.\",\n    [StreamingErrorType.NonexistentSessionId]: \"Session ID does not exist\",\n    [StreamingErrorType.SessionExpired]: \"Session has expired\",\n    [StreamingErrorType.ClosedSession]: \"Session is closed\",\n    [StreamingErrorType.RateLimited]: \"Rate limited\",\n    [StreamingErrorType.UniqueSessionViolation]: \"Unique session violation\",\n    [StreamingErrorType.SessionTimeout]: \"Session Timeout\",\n    [StreamingErrorType.AudioTooShort]: \"Audio too short\",\n    [StreamingErrorType.AudioTooLong]: \"Audio too long\",\n    [StreamingErrorType.AudioTooSmallToTranscode]: \"Audio too small to transcode\",\n    [StreamingErrorType.BadSchema]: \"Bad schema\",\n    [StreamingErrorType.TooManyStreams]: \"Too many streams\",\n    [StreamingErrorType.Reconnected]: \"This session has been reconnected. This WebSocket is no longer valid.\",\n};\nclass StreamingError extends Error {\n}\n\nconst defaultRealtimeUrl = \"wss://api.assemblyai.com/v2/realtime/ws\";\nconst forceEndOfUtteranceMessage = `{\"force_end_utterance\":true}`;\nconst terminateSessionMessage$1 = `{\"terminate_session\":true}`;\n/**\n * RealtimeTranscriber connects to the Streaming Speech-to-Text API and lets you transcribe audio in real-time.\n */\nclass RealtimeTranscriber {\n    /**\n     * Create a new RealtimeTranscriber.\n     * @param params - Parameters to configure the RealtimeTranscriber\n     */\n    constructor(params) {\n        this.listeners = {};\n        this.realtimeUrl = params.realtimeUrl ?? defaultRealtimeUrl;\n        this.sampleRate = params.sampleRate ?? 16_000;\n        this.wordBoost = params.wordBoost;\n        this.encoding = params.encoding;\n        this.endUtteranceSilenceThreshold = params.endUtteranceSilenceThreshold;\n        this.disablePartialTranscripts = params.disablePartialTranscripts;\n        if (\"token\" in params && params.token)\n            this.token = params.token;\n        if (\"apiKey\" in params && params.apiKey)\n            this.apiKey = params.apiKey;\n        if (!(this.token || this.apiKey)) {\n            throw new Error(\"API key or temporary token is required.\");\n        }\n    }\n    connectionUrl() {\n        const url = new URL(this.realtimeUrl);\n        if (url.protocol !== \"wss:\") {\n            throw new Error(\"Invalid protocol, must be wss\");\n        }\n        const searchParams = new URLSearchParams();\n        if (this.token) {\n            searchParams.set(\"token\", this.token);\n        }\n        searchParams.set(\"sample_rate\", this.sampleRate.toString());\n        if (this.wordBoost && this.wordBoost.length > 0) {\n            searchParams.set(\"word_boost\", JSON.stringify(this.wordBoost));\n        }\n        if (this.encoding) {\n            searchParams.set(\"encoding\", this.encoding);\n        }\n        searchParams.set(\"enable_extra_session_information\", \"true\");\n        if (this.disablePartialTranscripts) {\n            searchParams.set(\"disable_partial_transcripts\", this.disablePartialTranscripts.toString());\n        }\n        url.search = searchParams.toString();\n        return url;\n    }\n    /**\n     * Add a listener for an event.\n     * @param event - The event to listen for.\n     * @param listener - The function to call when the event is emitted.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    on(event, listener) {\n        this.listeners[event] = listener;\n    }\n    /**\n     * Connect to the server and begin a new session.\n     * @returns A promise that resolves when the connection is established and the session begins.\n     */\n    connect() {\n        return new Promise((resolve) => {\n            if (this.socket) {\n                throw new Error(\"Already connected\");\n            }\n            const url = this.connectionUrl();\n            if (this.token) {\n                this.socket = factory(url.toString());\n            }\n            else {\n                this.socket = factory(url.toString(), {\n                    headers: { Authorization: this.apiKey },\n                });\n            }\n            this.socket.binaryType = \"arraybuffer\";\n            this.socket.onopen = () => {\n                if (this.endUtteranceSilenceThreshold === undefined ||\n                    this.endUtteranceSilenceThreshold === null) {\n                    return;\n                }\n                this.configureEndUtteranceSilenceThreshold(this.endUtteranceSilenceThreshold);\n            };\n            this.socket.onclose = ({ code, reason }) => {\n                if (!reason) {\n                    if (code in RealtimeErrorMessages) {\n                        reason = RealtimeErrorMessages[code];\n                    }\n                }\n                this.listeners.close?.(code, reason);\n            };\n            this.socket.onerror = (event) => {\n                if (event.error)\n                    this.listeners.error?.(event.error);\n                else\n                    this.listeners.error?.(new Error(event.message));\n            };\n            this.socket.onmessage = ({ data }) => {\n                const message = JSON.parse(data.toString());\n                if (\"error\" in message) {\n                    this.listeners.error?.(new RealtimeError(message.error));\n                    return;\n                }\n                switch (message.message_type) {\n                    case \"SessionBegins\": {\n                        const openObject = {\n                            sessionId: message.session_id,\n                            expiresAt: new Date(message.expires_at),\n                        };\n                        resolve(openObject);\n                        this.listeners.open?.(openObject);\n                        break;\n                    }\n                    case \"PartialTranscript\": {\n                        // message.created is actually a string when coming from the socket\n                        message.created = new Date(message.created);\n                        this.listeners.transcript?.(message);\n                        this.listeners[\"transcript.partial\"]?.(message);\n                        break;\n                    }\n                    case \"FinalTranscript\": {\n                        // message.created is actually a string when coming from the socket\n                        message.created = new Date(message.created);\n                        this.listeners.transcript?.(message);\n                        this.listeners[\"transcript.final\"]?.(message);\n                        break;\n                    }\n                    case \"SessionInformation\": {\n                        this.listeners.session_information?.(message);\n                        break;\n                    }\n                    case \"SessionTerminated\": {\n                        this.sessionTerminatedResolve?.();\n                        break;\n                    }\n                }\n            };\n        });\n    }\n    /**\n     * Send audio data to the server.\n     * @param audio - The audio data to send to the server.\n     */\n    sendAudio(audio) {\n        this.send(audio);\n    }\n    /**\n     * Create a writable stream that can be used to send audio data to the server.\n     * @returns A writable stream that can be used to send audio data to the server.\n     */\n    stream() {\n        return new stream_web__WEBPACK_IMPORTED_MODULE_0__.WritableStream({\n            write: (chunk) => {\n                this.sendAudio(chunk);\n            },\n        });\n    }\n    /**\n     * Manually end an utterance\n     */\n    forceEndUtterance() {\n        this.send(forceEndOfUtteranceMessage);\n    }\n    /**\n     * Configure the threshold for how long to wait before ending an utterance. Default is 700ms.\n     * @param threshold - The duration of the end utterance silence threshold in milliseconds.\n     * This value must be an integer between 0 and 20_000.\n     */\n    configureEndUtteranceSilenceThreshold(threshold) {\n        this.send(`{\"end_utterance_silence_threshold\":${threshold}}`);\n    }\n    send(data) {\n        if (!this.socket || this.socket.readyState !== this.socket.OPEN) {\n            throw new Error(\"Socket is not open for communication\");\n        }\n        this.socket.send(data);\n    }\n    /**\n     * Close the connection to the server.\n     * @param waitForSessionTermination - If true, the method will wait for the session to be terminated before closing the connection.\n     * While waiting for the session to be terminated, you will receive the final transcript and session information.\n     */\n    async close(waitForSessionTermination = true) {\n        if (this.socket) {\n            if (this.socket.readyState === this.socket.OPEN) {\n                if (waitForSessionTermination) {\n                    const sessionTerminatedPromise = new Promise((resolve) => {\n                        this.sessionTerminatedResolve = resolve;\n                    });\n                    this.socket.send(terminateSessionMessage$1);\n                    await sessionTerminatedPromise;\n                }\n                else {\n                    this.socket.send(terminateSessionMessage$1);\n                }\n            }\n            if (this.socket?.removeAllListeners)\n                this.socket.removeAllListeners();\n            this.socket.close();\n        }\n        this.listeners = {};\n        this.socket = undefined;\n    }\n}\n/**\n * @deprecated Use RealtimeTranscriber instead\n */\nclass RealtimeService extends RealtimeTranscriber {\n}\n\nclass RealtimeTranscriberFactory extends BaseService {\n    constructor(params) {\n        super(params);\n        this.rtFactoryParams = params;\n    }\n    /**\n     * @deprecated Use transcriber(...) instead\n     */\n    createService(params) {\n        return this.transcriber(params);\n    }\n    transcriber(params) {\n        const serviceParams = { ...params };\n        if (!serviceParams.token && !serviceParams.apiKey) {\n            serviceParams.apiKey = this.rtFactoryParams.apiKey;\n        }\n        return new RealtimeTranscriber(serviceParams);\n    }\n    async createTemporaryToken(params) {\n        const data = await this.fetchJson(\"/v2/realtime/token\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n        return data.token;\n    }\n}\n/**\n * @deprecated Use RealtimeTranscriberFactory instead\n */\nclass RealtimeServiceFactory extends RealtimeTranscriberFactory {\n}\n\nfunction getPath(path) {\n    if (path.startsWith(\"http\"))\n        return null;\n    if (path.startsWith(\"https\"))\n        return null;\n    if (path.startsWith(\"data:\"))\n        return null;\n    if (path.startsWith(\"file://\"))\n        return path.substring(7);\n    if (path.startsWith(\"file:\"))\n        return path.substring(5);\n    return path;\n}\n\nclass TranscriptService extends BaseService {\n    constructor(params, files) {\n        super(params);\n        this.files = files;\n    }\n    /**\n     * Transcribe an audio file. This will create a transcript and wait until the transcript status is \"completed\" or \"error\".\n     * @param params - The parameters to transcribe an audio file.\n     * @param options - The options to transcribe an audio file.\n     * @returns A promise that resolves to the transcript. The transcript status is \"completed\" or \"error\".\n     */\n    async transcribe(params, options) {\n        const transcript = await this.submit(params);\n        return await this.waitUntilReady(transcript.id, options);\n    }\n    /**\n     * Submits a transcription job for an audio file. This will not wait until the transcript status is \"completed\" or \"error\".\n     * @param params - The parameters to start the transcription of an audio file.\n     * @returns A promise that resolves to the queued transcript.\n     */\n    async submit(params) {\n        let audioUrl;\n        let transcriptParams = undefined;\n        if (\"audio\" in params) {\n            const { audio, ...audioTranscriptParams } = params;\n            if (typeof audio === \"string\") {\n                const path = getPath(audio);\n                if (path !== null) {\n                    // audio is local path, upload local file\n                    audioUrl = await this.files.upload(path);\n                }\n                else {\n                    if (audio.startsWith(\"data:\")) {\n                        audioUrl = await this.files.upload(audio);\n                    }\n                    else {\n                        // audio is not a local path, and not a data-URI, assume it's a normal URL\n                        audioUrl = audio;\n                    }\n                }\n            }\n            else {\n                // audio is of uploadable type\n                audioUrl = await this.files.upload(audio);\n            }\n            transcriptParams = { ...audioTranscriptParams, audio_url: audioUrl };\n        }\n        else {\n            transcriptParams = params;\n        }\n        const data = await this.fetchJson(\"/v2/transcript\", {\n            method: \"POST\",\n            body: JSON.stringify(transcriptParams),\n        });\n        return data;\n    }\n    /**\n     * Create a transcript.\n     * @param params - The parameters to create a transcript.\n     * @param options - The options used for creating the new transcript.\n     * @returns A promise that resolves to the transcript.\n     * @deprecated Use `transcribe` instead to transcribe a audio file that includes polling, or `submit` to transcribe a audio file without polling.\n     */\n    async create(params, options) {\n        const path = getPath(params.audio_url);\n        if (path !== null) {\n            const uploadUrl = await this.files.upload(path);\n            params.audio_url = uploadUrl;\n        }\n        const data = await this.fetchJson(\"/v2/transcript\", {\n            method: \"POST\",\n            body: JSON.stringify(params),\n        });\n        if (options?.poll ?? true) {\n            return await this.waitUntilReady(data.id, options);\n        }\n        return data;\n    }\n    /**\n     * Wait until the transcript ready, either the status is \"completed\" or \"error\".\n     * @param transcriptId - The ID of the transcript.\n     * @param options - The options to wait until the transcript is ready.\n     * @returns A promise that resolves to the transcript. The transcript status is \"completed\" or \"error\".\n     */\n    async waitUntilReady(transcriptId, options) {\n        const pollingInterval = options?.pollingInterval ?? 3_000;\n        const pollingTimeout = options?.pollingTimeout ?? -1;\n        const startTime = Date.now();\n        // eslint-disable-next-line no-constant-condition\n        while (true) {\n            const transcript = await this.get(transcriptId);\n            if (transcript.status === \"completed\" || transcript.status === \"error\") {\n                return transcript;\n            }\n            else if (pollingTimeout > 0 &&\n                Date.now() - startTime > pollingTimeout) {\n                throw new Error(\"Polling timeout\");\n            }\n            else {\n                await new Promise((resolve) => setTimeout(resolve, pollingInterval));\n            }\n        }\n    }\n    /**\n     * Retrieve a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the transcript.\n     */\n    get(id) {\n        return this.fetchJson(`/v2/transcript/${id}`);\n    }\n    /**\n     * Retrieves a page of transcript listings.\n     * @param params - The parameters to filter the transcript list by, or the URL to retrieve the transcript list from.\n     */\n    async list(params) {\n        let url = \"/v2/transcript\";\n        if (typeof params === \"string\") {\n            url = params;\n        }\n        else if (params) {\n            url = `${url}?${new URLSearchParams(Object.keys(params).map((key) => [\n                key,\n                params[key]?.toString() || \"\",\n            ]))}`;\n        }\n        const data = await this.fetchJson(url);\n        for (const transcriptListItem of data.transcripts) {\n            transcriptListItem.created = new Date(transcriptListItem.created);\n            if (transcriptListItem.completed) {\n                transcriptListItem.completed = new Date(transcriptListItem.completed);\n            }\n        }\n        return data;\n    }\n    /**\n     * Delete a transcript\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the transcript.\n     */\n    delete(id) {\n        return this.fetchJson(`/v2/transcript/${id}`, { method: \"DELETE\" });\n    }\n    /**\n     * Search through the transcript for a specific set of keywords.\n     * You can search for individual words, numbers, or phrases containing up to five words or numbers.\n     * @param id - The identifier of the transcript.\n     * @param words - Keywords to search for.\n     * @returns A promise that resolves to the sentences.\n     */\n    wordSearch(id, words) {\n        const params = new URLSearchParams({ words: words.join(\",\") });\n        return this.fetchJson(`/v2/transcript/${id}/word-search?${params.toString()}`);\n    }\n    /**\n     * Retrieve all sentences of a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the sentences.\n     */\n    sentences(id) {\n        return this.fetchJson(`/v2/transcript/${id}/sentences`);\n    }\n    /**\n     * Retrieve all paragraphs of a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the paragraphs.\n     */\n    paragraphs(id) {\n        return this.fetchJson(`/v2/transcript/${id}/paragraphs`);\n    }\n    /**\n     * Retrieve subtitles of a transcript.\n     * @param id - The identifier of the transcript.\n     * @param format - The format of the subtitles.\n     * @param chars_per_caption - The maximum number of characters per caption.\n     * @returns A promise that resolves to the subtitles text.\n     */\n    async subtitles(id, format = \"srt\", chars_per_caption) {\n        let url = `/v2/transcript/${id}/${format}`;\n        if (chars_per_caption) {\n            const params = new URLSearchParams();\n            params.set(\"chars_per_caption\", chars_per_caption.toString());\n            url += `?${params.toString()}`;\n        }\n        const response = await this.fetch(url);\n        return await response.text();\n    }\n    /**\n     * Retrieve the redacted audio URL of a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the details of the redacted audio.\n     * @deprecated Use `redactedAudio` instead.\n     */\n    redactions(id) {\n        return this.redactedAudio(id);\n    }\n    /**\n     * Retrieve the redacted audio URL of a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the details of the redacted audio.\n     */\n    redactedAudio(id) {\n        return this.fetchJson(`/v2/transcript/${id}/redacted-audio`);\n    }\n    /**\n     * Retrieve the redacted audio file of a transcript.\n     * @param id - The identifier of the transcript.\n     * @returns A promise that resolves to the fetch HTTP response of the redacted audio file.\n     */\n    async redactedAudioFile(id) {\n        const { redacted_audio_url, status } = await this.redactedAudio(id);\n        if (status !== \"redacted_audio_ready\") {\n            throw new Error(`Redacted audio status is ${status}`);\n        }\n        const response = await fetch(redacted_audio_url);\n        if (!response.ok) {\n            throw new Error(`Failed to fetch redacted audio: ${response.statusText}`);\n        }\n        return {\n            arrayBuffer: response.arrayBuffer.bind(response),\n            blob: response.blob.bind(response),\n            body: response.body,\n            bodyUsed: response.bodyUsed,\n        };\n    }\n}\n\nconst readFile = async (path) => stream__WEBPACK_IMPORTED_MODULE_3__.Readable.toWeb((0,fs__WEBPACK_IMPORTED_MODULE_2__.createReadStream)(path));\n\nclass FileService extends BaseService {\n    /**\n     * Upload a local file to AssemblyAI.\n     * @param input - The local file path to upload, or a stream or buffer of the file to upload.\n     * @returns A promise that resolves to the uploaded file URL.\n     */\n    async upload(input) {\n        let fileData;\n        if (typeof input === \"string\") {\n            if (input.startsWith(\"data:\")) {\n                fileData = dataUrlToBlob(input);\n            }\n            else {\n                fileData = await readFile(input);\n            }\n        }\n        else\n            fileData = input;\n        const data = await this.fetchJson(\"/v2/upload\", {\n            method: \"POST\",\n            body: fileData,\n            headers: {\n                \"Content-Type\": \"application/octet-stream\",\n            },\n            duplex: \"half\",\n        });\n        return data.upload_url;\n    }\n}\nfunction dataUrlToBlob(dataUrl) {\n    const arr = dataUrl.split(\",\");\n    const mime = arr[0].match(/:(.*?);/)[1];\n    const bstr = atob(arr[1]);\n    let n = bstr.length;\n    const u8arr = new Uint8Array(n);\n    while (n--) {\n        u8arr[n] = bstr.charCodeAt(n);\n    }\n    return new Blob([u8arr], { type: mime });\n}\n\nconst defaultStreamingUrl$1 = \"wss://streaming.assemblyai.com/v3/ws\";\nconst terminateSessionMessage = `{\"type\":\"Terminate\"}`;\nclass StreamingTranscriber {\n    constructor(params) {\n        this.listeners = {};\n        this.params = {\n            ...params,\n            websocketBaseUrl: params.websocketBaseUrl || defaultStreamingUrl$1,\n        };\n        if (\"token\" in params && params.token)\n            this.token = params.token;\n        if (\"apiKey\" in params && params.apiKey)\n            this.apiKey = params.apiKey;\n        if (!(this.token || this.apiKey)) {\n            throw new Error(\"API key or temporary token is required.\");\n        }\n    }\n    connectionUrl() {\n        const url = new URL(this.params.websocketBaseUrl ?? \"\");\n        if (url.protocol !== \"wss:\") {\n            throw new Error(\"Invalid protocol, must be wss\");\n        }\n        const searchParams = new URLSearchParams();\n        if (this.token) {\n            searchParams.set(\"token\", this.token);\n        }\n        searchParams.set(\"sample_rate\", this.params.sampleRate.toString());\n        if (this.params.endOfTurnConfidenceThreshold) {\n            searchParams.set(\"end_of_turn_confidence_threshold\", this.params.endOfTurnConfidenceThreshold.toString());\n        }\n        if (this.params.minEndOfTurnSilenceWhenConfident) {\n            searchParams.set(\"min_end_of_turn_silence_when_confident\", this.params.minEndOfTurnSilenceWhenConfident.toString());\n        }\n        if (this.params.maxTurnSilence) {\n            searchParams.set(\"max_turn_silence\", this.params.maxTurnSilence.toString());\n        }\n        if (this.params.formatTurns) {\n            searchParams.set(\"format_turns\", this.params.formatTurns.toString());\n        }\n        if (this.params.encoding) {\n            searchParams.set(\"encoding\", this.params.encoding.toString());\n        }\n        if (this.params.keytermsPrompt) {\n            searchParams.set(\"keyterms_prompt\", JSON.stringify(this.params.keytermsPrompt));\n        }\n        else if (this.params.keyterms) {\n            console.warn(\"[Deprecation Warning] `keyterms` is deprecated and will be removed in a future release. Please use `keytermsPrompt` instead.\");\n            searchParams.set(\"keyterms_prompt\", JSON.stringify(this.params.keyterms));\n        }\n        if (this.params.filterProfanity) {\n            searchParams.set(\"filter_profanity\", this.params.filterProfanity.toString());\n        }\n        url.search = searchParams.toString();\n        return url;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    on(event, listener) {\n        this.listeners[event] = listener;\n    }\n    connect() {\n        return new Promise((resolve) => {\n            if (this.socket) {\n                throw new Error(\"Already connected\");\n            }\n            const url = this.connectionUrl();\n            if (this.token) {\n                this.socket = factory(url.toString());\n            }\n            else {\n                this.socket = factory(url.toString(), {\n                    headers: { Authorization: this.apiKey },\n                });\n            }\n            this.socket.binaryType = \"arraybuffer\";\n            this.socket.onopen = () => { };\n            this.socket.onclose = ({ code, reason }) => {\n                if (!reason) {\n                    if (code in StreamingErrorMessages) {\n                        reason = StreamingErrorMessages[code];\n                    }\n                }\n                this.listeners.close?.(code, reason);\n            };\n            this.socket.onerror = (event) => {\n                if (event.error)\n                    this.listeners.error?.(event.error);\n                else\n                    this.listeners.error?.(new Error(event.message));\n            };\n            this.socket.onmessage = ({ data }) => {\n                const message = JSON.parse(data.toString());\n                if (\"error\" in message) {\n                    this.listeners.error?.(new StreamingError(message.error));\n                    return;\n                }\n                switch (message.type) {\n                    case \"Begin\": {\n                        resolve(message);\n                        this.listeners.open?.(message);\n                        break;\n                    }\n                    case \"Turn\": {\n                        this.listeners.turn?.(message);\n                        break;\n                    }\n                    case \"Termination\": {\n                        this.sessionTerminatedResolve?.();\n                        break;\n                    }\n                }\n            };\n        });\n    }\n    stream() {\n        return new stream_web__WEBPACK_IMPORTED_MODULE_0__.WritableStream({\n            write: (chunk) => {\n                this.sendAudio(chunk);\n            },\n        });\n    }\n    sendAudio(audio) {\n        this.send(audio);\n    }\n    send(data) {\n        if (!this.socket || this.socket.readyState !== this.socket.OPEN) {\n            throw new Error(\"Socket is not open for communication\");\n        }\n        this.socket.send(data);\n    }\n    async close(waitForSessionTermination = true) {\n        if (this.socket) {\n            if (this.socket.readyState === this.socket.OPEN) {\n                if (waitForSessionTermination) {\n                    const sessionTerminatedPromise = new Promise((resolve) => {\n                        this.sessionTerminatedResolve = resolve;\n                    });\n                    this.socket.send(terminateSessionMessage);\n                    await sessionTerminatedPromise;\n                }\n                else {\n                    this.socket.send(terminateSessionMessage);\n                }\n            }\n            if (this.socket?.removeAllListeners)\n                this.socket.removeAllListeners();\n            this.socket.close();\n        }\n        this.listeners = {};\n        this.socket = undefined;\n    }\n}\n\nclass StreamingTranscriberFactory extends BaseService {\n    constructor(params) {\n        super(params);\n        this.baseServiceParams = params;\n    }\n    transcriber(params) {\n        const serviceParams = { ...params };\n        if (!serviceParams.token && !serviceParams.apiKey) {\n            serviceParams.apiKey = this.baseServiceParams.apiKey;\n        }\n        return new StreamingTranscriber(serviceParams);\n    }\n    async createTemporaryToken(params) {\n        const searchParams = new URLSearchParams();\n        // Add each param to the search params\n        Object.entries(params).forEach(([key, value]) => {\n            if (value !== undefined && value !== null) {\n                searchParams.append(key, String(value));\n            }\n        });\n        const queryString = searchParams.toString();\n        const url = queryString ? `/v3/token?${queryString}` : \"/v3/token\";\n        const data = await this.fetchJson(url, {\n            method: \"GET\",\n        });\n        return data.token;\n    }\n}\n\nconst defaultBaseUrl = \"https://api.assemblyai.com\";\nconst defaultStreamingUrl = \"https://streaming.assemblyai.com\";\nclass AssemblyAI {\n    /**\n     * Create a new AssemblyAI client.\n     * @param params - The parameters for the service, including the API key and base URL, if any.\n     */\n    constructor(params) {\n        params.baseUrl = params.baseUrl || defaultBaseUrl;\n        if (params.baseUrl && params.baseUrl.endsWith(\"/\")) {\n            params.baseUrl = params.baseUrl.slice(0, -1);\n        }\n        this.files = new FileService(params);\n        this.transcripts = new TranscriptService(params, this.files);\n        this.lemur = new LemurService(params);\n        this.realtime = new RealtimeTranscriberFactory(params);\n        this.streaming = new StreamingTranscriberFactory({\n            ...params,\n            baseUrl: params.streamingBaseUrl || defaultStreamingUrl,\n        });\n    }\n}\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/assemblyai/dist/node.mjs\n");

/***/ })

};
;